import z from "zod";

// ============================================================================
// BASE SCHEMAS
// ============================================================================

/** Many2one field: can be just an ID or an object with id and optional name */
export const many2oneSchema = z.union([
  z.number().int().positive(),
  z.object({
    id: z.number().int().positive(),
    name: z.string().optional(),
  }),
]);

/** Many2many / One2many: array of IDs or array of objects with id and name */
export const many2manySchema = z.array(many2oneSchema);

// ============================================================================
// SALE ORDER LINE SCHEMAS
// ============================================================================

/** Schema for creating/updating a sale order line */
export const createSaleOrderLineSchema = z.object({
  id: z.number().int().positive().optional(), // Only for updates
  order_id: many2oneSchema.optional(), // Parent sale order (optional if creating within order context)
  name: z.string().optional(), // Description (auto-filled from product if not provided)
  sequence: z.number().int().nonnegative().optional(),

  // Product fields
  product_id: many2oneSchema, // Required for product lines
  product_template_id: many2oneSchema.optional(),
  product_uom_qty: z.number().nonnegative().default(1),
  product_uom: many2oneSchema.optional(), // Unit of measure (auto-filled from product)

  // Pricing fields
  price_unit: z.number().nonnegative(),
  discount: z.number().min(0).max(100).optional(), // Discount percentage
  tax_id: many2manySchema.optional(), // Note: it's tax_id not taxes_id for sale orders

  // Computed fields (read-only, Odoo calculates these)
  price_subtotal: z.number().optional(),
  price_total: z.number().optional(),
  price_tax: z.number().optional(),

  // Quantities (mostly computed/managed by Odoo)
  qty_delivered: z.number().optional(),
  qty_invoiced: z.number().optional(),
  qty_to_invoice: z.number().optional(),

  // Additional fields
  customer_lead: z.number().optional(), // Delivery lead time in days
  display_type: z.enum(["line_section", "line_note"]).optional(), // For section/note lines
});

/** Schema for reading/displaying a sale order line (includes all computed fields) */
export const saleOrderLineSchema = createSaleOrderLineSchema.extend({
  id: z.number().int().positive(), // ID is required when reading
  order_id: many2oneSchema, // Required when reading
  state: z.enum(["draft", "sent", "sale", "done", "cancel"]).optional(),
  currency_id: many2oneSchema.optional(),
  company_id: many2oneSchema.optional(),
  order_partner_id: many2oneSchema.optional(), // Customer from parent order
  salesman_id: many2oneSchema.optional(),
  is_expense: z.boolean().optional(),
});

// ============================================================================
// SALE ORDER SCHEMAS
// ============================================================================

/** Schema for creating a new sale order */
export const createSaleOrderSchema = z.object({
  // Basic info
  name: z.string().optional(), // Auto-generated by Odoo if not provided

  // Partner fields (required)
  partner_id: many2oneSchema, // Customer - REQUIRED
  partner_invoice_id: many2oneSchema.optional(), // Auto-filled from partner if not provided
  partner_shipping_id: many2oneSchema.optional(), // Auto-filled from partner if not provided

  // Commercial fields
  pricelist_id: many2oneSchema.optional(),
  payment_term_id: many2oneSchema.optional(),
  validity_date: z.string().optional(), // ISO date string (YYYY-MM-DD)
  date_order: z.string().optional(), // ISO datetime string

  // User/Company
  user_id: many2oneSchema.optional(), // Salesperson
  team_id: many2oneSchema.optional(), // Sales team
  company_id: many2oneSchema.optional(),

  // Order lines (can be created inline)
  order_lines: z.array(
    z.union([
      // Odoo command format: [0, 0, {field: value}] for create
      z.tuple([z.literal(0), z.literal(0), createSaleOrderLineSchema]),
      // Or just the line data (some Odoo APIs accept this)
      createSaleOrderLineSchema,
    ])
  ).optional(),

  // Additional fields
  client_order_ref: z.string().optional(), // Customer reference
  note: z.string().optional(), // Terms and conditions
  fiscal_position_id: many2oneSchema.optional(),
  currency_id: many2oneSchema.optional(),

  // State (usually starts as draft)
  state: z.enum(["draft", "sent", "sale", "done", "cancel"]).optional(),
});

/** Schema for reading/displaying a sale order (includes computed fields) */
export const saleOrderSchema = createSaleOrderSchema.extend({
  id: z.number().int().positive(), // ID is required when reading

  // Computed financial fields
  amount_untaxed: z.number().optional(),
  amount_tax: z.number().optional(),
  amount_total: z.number().optional(),

  // Status fields
  state: z.enum(["draft", "sent", "sale", "done", "cancel"]),
  invoice_status: z.enum(["no", "to invoice", "invoiced"]).optional(),
  delivery_status: z.enum(["no", "to deliver", "delivered"]).optional(),

  // Dates
  create_date: z.string().optional(),
  write_date: z.string().optional(),
  commitment_date: z.string().optional(), // Promised delivery date
  expected_date: z.string().optional(),

  // Read-only line items
  order_line: z.array(saleOrderLineSchema).optional(),
});

// ============================================================================
// FORM SCHEMA (for UI forms)
// ============================================================================

/** Schema for sale order form submission (combines creation fields with UI-friendly structure) */
export const saleOrderFormSchema = z.object({
  // Basic customer info
  partner_id: many2oneSchema,
  partner_invoice_id: many2oneSchema.optional(),
  partner_shipping_id: many2oneSchema.optional(),

  // Order details
  date_order: z.string().optional(),
  validity_date: z.string().optional(),
  client_order_ref: z.string().optional(),

  // Commercial
  pricelist_id: many2oneSchema.optional(),
  payment_term_id: many2oneSchema.optional(),
  user_id: many2oneSchema.optional(), // Salesperson

  // Order lines (simplified for form input)
  order_lines: z.array(
    z.object({
      product_id: many2oneSchema || z.boolean(),
      product_uom_qty: z.coerce.number().nonnegative().default(1),
      price_unit: z.coerce.number().nonnegative(),
      discount: z.coerce.number().min(0).max(100).optional(),
      tax_id: many2manySchema.optional(),
      name: z.string().optional(), // Custom description
    })
  ).default([]),

  // Additional
  note: z.string().optional(),
});

// ============================================================================
// TYPE EXPORTS
// ============================================================================

export type CreateSaleOrderLine = z.infer<typeof createSaleOrderLineSchema>;
export type SaleOrderLine = z.infer<typeof saleOrderLineSchema>;

export type CreateSaleOrder = z.infer<typeof createSaleOrderSchema>;
export type SaleOrder = z.infer<typeof saleOrderSchema>;

export type SaleOrderForm = z.infer<typeof saleOrderFormSchema>;

// Helper to get form field keys
export const saleOrderFormKeys = Object.keys(saleOrderFormSchema.shape) as Array<
  keyof SaleOrderForm
>;

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

/** Convert form data to Odoo create format */
export function formToOdooCreate(formData: SaleOrderForm): CreateSaleOrder {
  return {
    partner_id: formData.partner_id,
    partner_invoice_id: formData.partner_invoice_id,
    partner_shipping_id: formData.partner_shipping_id,
    date_order: formData.date_order,
    validity_date: formData.validity_date,
    client_order_ref: formData.client_order_ref,
    pricelist_id: formData.pricelist_id,
    payment_term_id: formData.payment_term_id,
    user_id: formData.user_id,
    note: formData.note,
    // Convert order_lines to Odoo command format
    order_lines: formData.order_lines.map(line => [
      0,
      0,
      {
        product_id: line.product_id,
        product_uom_qty: line.product_uom_qty,
        price_unit: line.price_unit,
        discount: line.discount,
        tax_id: line.tax_id,
        name: line.name,
      },
    ] as const),
  };
}

/** Extract many2one ID (handles both number and object formats) */
export function extractMany2oneId(field: z.infer<typeof many2oneSchema>): number {
  return typeof field === "number" ? field : field.id;
}