/* 
    ODOO PURCHASE ORDER FIELD MAPPING:
    
    ðŸ”´ REQUIRED USER INPUT:
    - [x] partner_id: Supplier selection (must select from existing suppliers)
    
    ðŸŸ¡ OPTIONAL USER INPUT:
    - [x] partner_ref: Supplier's reference/PO number
    - [x] customer_id: Customer for drop-shipping scenarios
    - [x] date_order: Order date (defaults to today)
    - [x] date_planned: Expected delivery date
    - [x] notes: Terms, conditions, special instructions
    - [x] order_line: Purchase order items
    - [ ] company_id, user_id, currency_id: Business settings
    - [x] project_id: Link to project for tracking
    - [ ] picking_type_id: Warehouse operation type
    - [ ] payment_term_id: Payment terms with supplier
    - [ ] fiscal_position_id: Tax configuration
    - [ ] incoterm_id: International commercial terms
    - [ ] order_status, shipping_status, payment_status: Custom status tracking
    - [ ] invoice_status: Invoicing workflow status
    - [ ] date_approve: When the PO was approved
    
    ðŸŸ¢ AUTO-GENERATED BY ODOO:
    - id: Record ID (auto-increment)
    - name: PO number (follows sequence like PO00001)
    - state: Workflow state (starts as "draft")
    
    ðŸ”µ COMPUTED BY ODOO:
    - amount_untaxed: Sum of all line subtotals
    - amount_tax: Total tax amount
    - amount_total: amount_untaxed + amount_tax
    - invoice_count: Number of vendor bills created
*/
import { z } from "zod";
import { many2oneSchema } from "./odooSchemas";

/** Common enums from purchase.order */
export const purchaseStateEnum = z.enum([
	"draft", // RFQ
	"sent", // RFQ Sent
	"to approve", // Waiting approval
	"purchase", // Purchase Order
	"done", // Locked/Done
	"cancel", // Cancelled
]);

export const invoiceStatusEnum = z.enum([
	"no", // nothing to invoice
	"to invoice", // waiting bills
	"invoiced", // fully billed
]);

export const orderStatusEnum = z.enum([
    "pending",
    "processing",
    "shipped",
    "delivered",
])

export const orderLineFormSchema = z.object({
	product_name: z.string(),
	product_qty: z.number().min(1, "Quantity must be 0 or greater").default(1).optional(),
	price_unit: z.number().min(0, "Price must be 0 or greater").default(0).optional(),
    image: z.instanceof(File).optional(), // For form file upload
});

export const orderLineCreateSchema = z.object({
    // name: z.string(), // Product name
	product_id: many2oneSchema.optional(),
	product_qty: z.number().min(0, "Quantity must be 0 or greater").default(1).optional(),
	price_unit: z.number().min(0, "Price must be 0 or greater").default(0).optional(),
	price_subtotal: z.number().optional(), // computed by Odoo
});

export const orderLineUpdateSchema = z.object({
	product_id: many2oneSchema.optional(),
	product_qty: z.number().min(0, "Quantity must be 0 or greater").default(1).optional(),
	price_unit: z.number().min(0, "Price must be 0 or greater").default(0).optional(),
	price_subtotal: z.number().optional(), // computed by Odoo
});

export const orderLineReadSchema = z.object({
	id: z.number().int().positive().optional(),
	product_id: many2oneSchema.optional(),
	product_qty: z.number().min(0, "Quantity must be 0 or greater").default(1).optional(),
	price_unit: z.number().min(0, "Price must be 0 or greater").default(0).optional(),
	price_subtotal: z.number().optional(), // computed by Odoo
});

/** Purchase order schema for API responses (may have line IDs only) */
export const purchaseOrderSchema = z.object({
	id: z.number().int().positive().optional(),
	name: z.string().optional(), // PO number
	partner_id: many2oneSchema, // Vendor
	partner_ref: z.union([z.string(), z.literal(false)]).optional(), // Vendor reference
	customer_id: many2oneSchema.optional(),
	order_status: orderStatusEnum.default("pending"),
	shipping_status: z.string().optional(),
	payment_status: z.string().optional(),
	company_id: many2oneSchema.optional(),
	user_id: many2oneSchema.optional(), // Buyer
	currency_id: many2oneSchema.optional(),
	project_id: many2oneSchema.optional(),
	picking_type_id: many2oneSchema.optional(), // incoming picking type
	payment_term_id: many2oneSchema.optional(),
	fiscal_position_id: many2oneSchema.optional(),
	incoterm_id: many2oneSchema.optional(),
	dest_address_id: many2oneSchema.optional(),

    state: purchaseStateEnum.optional().default("draft"),
	invoice_status: invoiceStatusEnum.optional().default("to invoice"),

	date_order: z.union([z.string(), z.literal(false)]).optional(), // ISO datetime or false
	date_approve: z.union([z.string(), z.literal(false)]).optional(), // ISO datetime or false
	date_planned: z.union([z.string(), z.literal(false)]), // ISO datetime or false

	order_line: z.array(z.number().int().positive()).default([]), // Array of line IDs
	invoice_ids: z.array(z.number().int().positive()).default([]), // Array of invoice IDs
	invoice_count: z.number().optional(),

	amount_untaxed: z.number().optional(), // computed by Odoo
	amount_tax: z.number().optional(), // computed by Odoo
	amount_total: z.number().optional(), // computed by Odoo

	notes: z.string().optional(), // terms/notes
});


/** Form schema for purchase order creation - includes all relevant fields */
export const purchaseOrderFormSchema = purchaseOrderSchema.pick({
    state: true,
    order_status: true,
	partner_id: true,
    partner_ref: true,
    customer_id: true,
    date_planned: true,
    invoice_status: true,
})
.extend({
	order_line: z.array(orderLineFormSchema).optional().default([]),
});


export type tPurchaseOrderForm = z.infer<typeof purchaseOrderFormSchema>;
export type tPurchaseOrder = z.infer<typeof purchaseOrderSchema>;


export type tOrderLineForm = z.infer<typeof orderLineFormSchema>;
export type tOrderLineCreate = z.infer<typeof orderLineCreateSchema>;
export type tOrderLineUpdate = z.infer<typeof orderLineUpdateSchema>;
export type tOrderLineRead = z.infer<typeof orderLineReadSchema>;
// export type CustomColumn = z.infer<typeof customColumnSchema>;

export const purchaseOrderKeys = Object.keys(purchaseOrderSchema.shape);
export const purchaseOrderLineKeys = Object.keys(orderLineReadSchema.shape);