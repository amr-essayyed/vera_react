import { z } from "zod";

export const workflowTypeEnum = z.enum(["type1", "type2", "type3"]);

// Workflow type display mapping
export const workflowTypeOptions = [
	{ value: "type1", label: "Type 1: PO → Inventory & Shipping → SO/Invoice → Done" },
	{ value: "type2", label: "Type 2: PO → SO/Invoice → Handover (D2D) → Done" },
	{ value: "type3", label: "Type 3: Quotation → PO → Inventory & Shipping → SO/Invoice → Done" },
] as const;
export const priorityEnum = z.enum(["1", "2", "3"]); // Priority levels: 1=Low, 2=Medium, 3=High

export const masterOrderSchema = z.object({
	id: z.string().optional(),
	name: z.string().optional(), // Autogenerated in backend
	project_name: z.string().min(1),
	workflow_type: workflowTypeEnum.optional(),
	client_id: z.union([z.string(), z.tuple([z.number(), z.string()])]),
	vendor_id: z.union([z.boolean(), z.string(), z.tuple([z.number(), z.string()])]).optional(),
	date_order: z.string().min(1).optional(),
	date_expected: z.string().min(1).optional(),
	priority: priorityEnum.optional(),
	commission_rate: z.number().optional(),
	amount_total: z.number().optional(),
	line_ids: z.array(z.string()).optional(),
});

export const masterOrderLineSchema = z.object({
	id: z.string().optional(),
	name: z.string().optional(),
	master_id: z.string().optional(),
	vendor_id: z.string().optional(),
	quantity: z.number().optional(),
	price_unit: z.number().optional(),
	currency_id: z.string().optional(),
	price_subtotal: z.number().optional(),
	image_1920: z.instanceof(File).optional(),
});

/** Extended purchase order line for form with image support */
export const masterOrderLineFormSchema = masterOrderLineSchema.extend({
	image: z.instanceof(File).optional(), // For form file upload
}); // .catchall(z.any()); // Allow custom fields as direct properties

/** Form schema for purchase order creation */
export const masterOrderFormSchema = z.object({
	...masterOrderSchema.shape,
	client_id: z.string().min(1, "Client is required"), // Override to require string in form
	vendor_id: z.string().optional(), // Override to use string in form
	commission_rate: z.number().min(0).max(100).optional(), // Commission rate as percentage (0-100)
	date_expected: z.string().optional(), // Override to use string in form for date input
	order_line: z.array(masterOrderLineFormSchema).min(1, "At least one line is required"),
	// customColumns: z.array(customColumnSchema).default([]),
});

export type tMasterOrder = z.infer<typeof masterOrderSchema>;
export type tMasterOrderLine = z.infer<typeof masterOrderLineSchema>;
export type tMasterOrderLineForm = z.infer<typeof masterOrderLineFormSchema>;
export type tMasterOrderForm = z.infer<typeof masterOrderFormSchema>;
